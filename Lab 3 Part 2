# Brittany Giangarra
# Lab 3 Part 2
# A 32 bit register called register32 built from components of register8.

--------------------------------------------------------------------------------


Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity bitstorage is
	port(bitin: in std_logic;
		 enout: in std_logic; --this input is important for normal memory elements
		 writein: in std_logic;
		 bitout: out std_logic);
end entity bitstorage;


architecture memlike of bitstorage is
	signal q: std_logic;
begin
	process(writein) is
	begin
		if (rising_edge(writein)) then
			q <= bitin;
		end if;
	end process;
	
	-- Note that data is output only when enout = 0	
	bitout <= q when enout = '0' else 'Z';
end architecture memlike;


--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;


entity register32 is
	port(datain: in std_logic_vector(31 downto 0);
		 enout32: in std_logic;
		 writein32: in std_logic;
		 dataout: out std_logic_vector(31 downto 0));
end entity register32;


architecture biggermem of register32 is
	-- hint: you'll want to put register8 as a component here 
	-- so you can use it below
begin
	-- insert code here.
end architecture biggermem;
