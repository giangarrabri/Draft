# Brittany Giangarra
# Lab 3 Part 4
# A 32 bit adder/subtracter
--------------------------------------------------------------------------------


Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity bitstorage is
	port(bitin: in std_logic;
		 enout: in std_logic; --this input is important for normal memory elements
		 writein: in std_logic;
		 bitout: out std_logic);
end entity bitstorage;


architecture memlike of bitstorage is
	signal q: std_logic;
begin
	process(writein) is
	begin
		if (rising_edge(writein)) then
			q <= bitin;
		end if;
	end process;
	
	-- Note that data is output only when enout = 0	
	bitout <= q when enout = '0' else 'Z';
end architecture memlike;


--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;

entity controller is
         port(instruction: in std_logic_vector(31 downto 0);
               clock: in std_logic;
               out std_logic_vector(3 downto 0);  -- 0010 for ADD, 0110 for SUB
               ReadRegister1: out std_logic_vector(4 downto 0);
               ReadRegister2: out std_logic_vector(4 downto 0);
               WriteRegister: out std_logic_vector(4 downto 0));

end entity controller;

