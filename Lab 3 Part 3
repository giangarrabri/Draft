# Brittany Giangarra
# Lab 3 Pary3
# A 32 bit shift register that can shift up to 3 bits in either direction
--------------------------------------------------------------------------------


Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity bitstorage is
	port(bitin: in std_logic;
		 enout: in std_logic; --this input is important for normal memory elements
		 writein: in std_logic;
		 bitout: out std_logic);
end entity bitstorage;


architecture memlike of bitstorage is
	signal q: std_logic;
begin
	process(writein) is
	begin
		if (rising_edge(writein)) then
			q <= bitin;
		end if;
	end process;
	
	-- Note that data is output only when enout = 0	
	bitout <= q when enout = '0' else 'Z';
end architecture memlike;


--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity bytemem is
	port(data: inout std_logic_vector(7 downto 0);
                    rdwr: in std_logic;
                    enout8: in std_logic);
end entity bytemem;


--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity shift_register is
	port(data: inout std_logic_vector(7 downto 0);
                        address: in std_logic_vector(3 downto 0);
	   	rdwr: in std_logic;
		endout: in std_logic;
end entity byte_array;
