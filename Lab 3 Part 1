# Brittany Giangarra
# Lab 3 Part 1
# An 8 bit register called register8 from components of the memory cell in register.vhd
--------------------------------------------------------------------------------


Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity bitstorage is
	port(bitin: in std_logic;
		 enout: in std_logic; --this input is important for normal memory elements
		 writein: in std_logic;
		 bitout: out std_logic);
end entity bitstorage;


architecture memlike of bitstorage is
	signal q: std_logic;
begin
	process(writein) is
	begin
		if (rising_edge(writein)) then
			q <= bitin;
		end if;
	end process;
	
	-- Note that data is output only when enout = 0	
	bitout <= q when enout = '0' else 'Z';
end architecture memlike;


--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_arith.all;
Use ieee.std_logic_unsigned.all;


entity register8 is
    port (datain: in std_logic_vector(7 downto0);
          enout: in std_logic;
          writein : in std_logic;
          dataout: out std_logic_vector(7 downto 0));
end entity register8;


architecture memmy of register8 is
          component bitstorage
                  port(bitin: in std_logic; 
                             enout: in std_logic;
                             writein: in std_logic;
                             bitout: out std_logic);
         end component;
begin
         -- insert your code here.
end architecture memmy;

